@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Notification

@{
    ViewData["Title"] = "Details";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/css/NotificationDetail.css" asp-append-version="true">
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
          integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
          crossorigin="" />
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js" integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM=" crossorigin=""></script>
    <script src="html2pdf.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.5/jspdf.debug.js"></script>
    <script src="https://parall.ax/parallax/js/jspdf.js"></script>
    <script src="Javascript/external/jspdf.plugin.standard_fonts_metrics.js"></script>
    <script src="Javascript/external/jspdf.plugin.split_text_to_size.js"></script>
    <script src="Javascript/external/jspdf.plugin.from_html.js"></script>
    <script src="Javascript/external/jspdf.debug.js"></script>
    <script src="jspdf.min.js"></script>
    <script src="scriptD.js"></script>
    <script src="~/js/savePdf.js"></script>
    <script type="text/javascript" src="/js/myimage.js"></script>
    <style>
        .map {
            width: 90%;
            height: 300px;
            margin: 5%;
        }
    </style>
    <title>Notifications</title>
</head>
<body>
    <div class="container">
        <div class="wrapper">

            <i class='bx bx-alarm-exclamation'></i>
            <form action="#">
                <div class="bck_button">
                    <input type="button" value="Back" onclick="location.href='@Url.Action("Index", "Notifications")'" />
                    
                    <button class="topdf" onclick="topdf(`@Model.ID`, `@Model.Time`, `@Model.Latitude`, `@Model.Longitude`, `@Model.Sound_Type`, `@Model.Probability`)" download="">Save PDF</button>
                </div>
                <div class="save-notification">
                </div>
                <h1 class="label-text">Location</h1>

                <div id="map" class="map"></div>

                <h1 class="label-text">Time and date</h1>
                <div class="data">
                    <label>
                        @Html.DisplayFor(model => model.Time)
                    </label>
                </div>
                <h1 class="label-text">Soundtype</h1>
                <div class="data">
                    <label>
                        @Html.DisplayFor(model => model.Sound_Type)
                    </label>
                </div>
                <h1 class="label-text">Certainty</h1>
                <div class="data">
                    <label>
                        @Html.DisplayFor(model => model.Probability)%
                    </label>
                </div>
                <h1 class="label-text">Soundclip</h1>
                <div class="data">
                    <label>
                        <audio controls>
                            <source src="@ViewBag.Sound" />
                            Your browser does not support the audio element.
                        </audio>
                    </label>
                </div>
                <h1 class="label-text">Change Status</h1>
                <div class="data">
                    @if (Model.Status == "Open")
                    {
                        <label style="color: rgb(14,181,8)">
                            Current status: @Html.DisplayFor(model => model.Status)
                        </label>
                    }
                    else if (Model.Status == "In Progress")
                    {
                        <label style="color: rgb(255,196,20)">
                            Current status: @Html.DisplayFor(model => model.Status)
                        </label>
                    }
                    else
                    {
                        <label style="color: rgb(255,20,20)">
                            Current status: @Html.DisplayFor(model => model.Status)
                        </label>
                    }

                </div>
                <div class="open">
                    <input type="button" value="Change Status to Open" onclick="location.href='@Url.Action("StatusToOpen", "Notifications", new { id = Model.ID })'" />
                </div>
                <div class="in_progress">
                    <input type="button" value="Change Status to In Progress" onclick="location.href='@Url.Action("StatusToProgress", "Notifications", new { id = Model.ID })'" />
                </div>
                <div class="close">
                    <input type="button" value="Change Status to Closed" onclick="location.href='@Url.Action("StatusToClosed", "Notifications", new { id = Model.ID })'" />
                </div>
             
            </form>
        </div>
    </div>
    

    <script>
        var latitude = '@Model.Latitude';
        var longitude = '@Model.Longitude';
        var map = L.map("map", {
            minZoom: 0,
            maxZoom: 16,

        }).setView([0, 0], 3);
        L.tileLayer("https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=vbWSgaVomjqBXBlqx78m", {
            // attribution: '<a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
        }).addTo(map)


        var southWest = L.latLng(-89.98155760646617, -180),
            northEast = L.latLng(89.99346179538875, 180);
        var bounds = L.latLngBounds(southWest, northEast);

        map.setMaxBounds(bounds);
        map.on('drag', function () {
            map.panInsideBounds(bounds, { animate: false });
        });

        map.attributionControl.setPrefix("Chengeta Wildlife")
        map.flyTo([parseFloat(latitude), parseFloat(longitude)], 8)
        
        var greenIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var redIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var yellowIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var violetIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-violet.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var blueIcon = new L.Icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        var Icon = "";

        if ('@Model.Sound_Type' == "gunshot") {
            Icon = redIcon;
        }
        else if ('@Model.Sound_Type' == "animal") {
            Icon = greenIcon;
        }
        else if ('@Model.Sound_Type' == "thunder") {
            Icon = yellowIcon;
        }
        else if ('@Model.Sound_Type' == "vehicle") {
            Icon = violetIcon;
        }
        else {
            Icon = blueIcon;
        }

        var marker = L.marker([parseFloat(latitude), parseFloat(longitude)], {icon: Icon}).addTo(map).bindPopup("Latitude: " + '@Model.Latitude' + "<br>" + "Longitude: " + '@Model.Longitude' + "<br>" + "Sound type: " + '@Model.Sound_Type' + "<br>" + "Probability: " + '@Model.Probability' + "%");
        var rangerIcon = L.icon({
            iconUrl: "./wwwroot/images/Ranger.png",
            iconAnchor: [15, 25],
            iconSize: [27.5, 37.5]
        })

    </script>

    

</body>
</html>
